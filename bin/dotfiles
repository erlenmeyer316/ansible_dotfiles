#!/bin/bash

###########################
# Color codes
###########################
RESTORE='\033[0m'
NC='\033[0m'
BLACK='\033[00;30m'
RED='\033[00;31m'
GREEN='\033[00;32m'
YELLOW='\033[00;33m'
BLUE='\033[00;34m'
PURPLE='\033[00;35m'
CYAN='\033[00;36m'
SEA="\\033[38;5;49m"
LIGHTGRAY='\033[00;37m'
LBLACK='\033[01;30m'
LRED='\033[01;31m'
LGREEN='\033[01;32m'
LYELLOW='\033[01;33m'
LBLUE='\033[01;34m'
LPURPLE='\033[01;35m'
LCYAN='\033[01;36m'
WHITE='\033[01;37m'
OVERWRITE='\e[1A\e[K'

###########################
# emoji codes
###########################
CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"
X_MARK="${RED}\xE2\x9C\x96${NC}"
PIN="${RED}\xF0\x9F\x93\x8C${NC}"
CLOCK="${GREEN}\xE2\x8C\x9B${NC}"
ARROW="${SEA}\xE2\x96\xB6${NC}"
BOOK="${RED}\xF0\x9F\x93\x8B${NC}"
HOT="${ORANGE}\xF0\x9F\x94\xA5${NC}"
WARNING="${RED}\xF0\x9F\x9A\xA8${NC}"
RIGHT_ANGLE="${GREEN}\xE2\x88\x9F${NC}"


set -e

##########################
# Paths
##########################
ENV_FILE="$HOME/.dotfiles_env"
DOTFILES_LOG="$HOME/.dotfiles.log"
DOTFILES_DIR="$HOME/.dotfiles"
SSH_DIR="$HOME/.ssh"
SSL_DIR="$HOME/.cert"
KPXC_DIR="$HOME/.kpxc"
IS_FIRST_RUN="$HOME/.dotfiles_run"
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd)



#########################
# Variables
#########################
KPXC_INSTALLED=0
KPXC_AUTHENTICATED=0
ID=""

# source the env file
if [ -f "${ENV_FILE}" ]; then
    set -a; source "${ENV_FILE}"; set +a;
    rm -rf "${ENV_FILE}"
else
    printf "KPXC_PW=\nKPXC_VAULT=\nKPXC_WEBDAV_URL=\nKPXC_WEBDAV_USER=\nKPXC_WEBDAV_PW=\n" > "$ENV_FILE"
fi

# _header colorize the given argument with spacing
function __task {
  # if _task is called while a task was set, complete the previous
  if [[ $TASK != "" ]]; then
    printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
  fi
  # set new task title and print
  TASK=$1
  printf "${LBLACK} [ ]  ${TASK} \n${LRED}"
}

# _cmd performs commands with error checking
function _cmd {
  #create log if it doesn't exist
  if ! [[ -f $DOTFILES_LOG ]]; then
    touch $DOTFILES_LOG
  fi
  # empty conduro.log
  > $DOTFILES_LOG
  # hide stdout, on error we print and exit
  if eval "$1" 1> /dev/null 2> $DOTFILES_LOG; then
    return 0 # success
  fi
  # read error from log and add spacing
  printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n"
  while read line; do
    printf "      ${line}\n"
  done < $DOTFILES_LOG
  printf "\n"
  # remove log file
  rm $DOTFILES_LOG
  # exit installation
  exit 1
}

function _clear_task {
  TASK=""
}

function _task_done {
  printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
  _clear_task
}

function debian_setup(){
  if ! [ -x "$(command -v ansible)" ]; then
    local UBUNTU_CODENAME=""
  
    case $VERSION_ID in
      12)
        UBUNTU_CODENAME=jammy
        ;;
      11)
        UBUNTU_CODENAME=focal
        ;;
      10)
        UBUNTU_CODENAME=bionic
        ;;
      *)
        __task "Unsupported Debian version"
        _cmd "echo 'Unsupported Debian version'"
        ;;
      esac

    if [[ $UBUNTU_CODENAME != "" ]]; then
      local APT_PPA_ENTRY="deb [signed-by=/usr/share/keyrings/ansible-archive-keyring.gpg] http://ppa.launchpad.net/ansible/ansible/ubuntu $UBUNTU_CODENAME main"
      __task "Updating package repositories"
      _cmd "sudo apt-get update"
      __task "Installing dependencies"
      _cmd "sudo apt-get install wget gnupg2 git keepassxc openssl -y"
      __task "Adding Ubuntu PPA signing key"
      _cmd "wget -O- \"https://keyserver.ubuntu.com/pks/lookup?fingerprint=on&op=get&search=0x6125E2A8C77F2818FB7BD15B93C4A3FD7BB9C367\" | sudo gpg2 --dearmour -o /usr/share/keyrings/ansible-archive-keyring.gpg"
      __task "Adding Ubuntu PPA to repository list"
      _cmd "echo $APT_PPA_ENTRY | sudo tee /etc/apt/sources.list.d/ansible.list"
      __task "Updating package repositories"
      _cmd "sudo apt-get update"
      __task "Installing Ansible"
      _cmd "sudo apt-get install ansible -y" 
      __task "Installing python3-argcomplete"
      _cmd "sudo apt-get install python3-argcomplete"
      _cmd "sudo activate-global-python-argcomplete"
 
      if ! dpkg -s python3 >/dev/null 2>&1; then
        __task "Installing Python3"
        _cmd "sudo apt-get install -y python3"
      fi

      if ! dpkg -s python3-pip >/dev/null 2>&1; then
        __task "Installing Python3 Pip"
        _cmd "sudo apt-get install -y python3-pip"
      fi
    
      if ! pip3 list | grep watchdog >/dev/null 2>&1; then
        __task "Installing Python3 Watchdog"
        _cmd "sudo apt-get install -y python3-watchdog"
      fi
    fi
  fi
}

function ubuntu_setup() {
  if ! dpkg -s ansible >/dev/null 2>&1; then
    __task "Updating package repositories"
    _cmd "sudo apt-get update"
    __task "Installing dependencies"
    _cmd "sudo apt-get install -y software-properties-common git keepassxc openssl"
    __task "Adding Ubuntu PPA to repository list"
    _cmd "sudo apt-add-repository -y ppa:ansible/ansible"
    __task "Updating package repositories"
    _cmd "sudo apt-get update"
    _cmd "sudo apt-get update"
    __task "Installing Ansible"
    _cmd "sudo apt-get install -y ansible"
    __task "Installing python3-argcomplete"
    _cmd "sudo apt-get install python3-argcomplete"
    _cmd "sudo activate-global-python-argcomplete3"
  fi
  if ! dpkg -s python3 >/dev/null 2>&1; then
    __task "Installing Python3"
    _cmd "sudo apt-get install -y python3"
  fi

  local UBUNTU_MAJOR_VERSION=$(echo $VERSION_ID | cut -d. -f1)
  if [ $UBUNTU_MAJOR_VERSION -le 22 ]; then
    if ! dpkg -s python3-pip >/dev/null 2>&1; then
      __task "Installing Python3 Pip"
      _cmd "sudo apt-get install -y python3-pip"
    fi
    if ! pip3 list | grep watchdog >/dev/null 2>&1; then
      __task "Installing Python3 Watchdog"
      _cmd "sudo apt-get install -y python3-watchdog"
    fi
  fi
}

function arch_setup() {
  if ! [ -x "$(command -v ansible)" ]; then
    __task "Updating package repositories"
    _cmd "sudo pacman -Sy --noconfirm"
    __task "Installing dependencies"
    _cmd "sudo pacman -S --noconfirm git keepassxc openssl"
    __task "Installing Ansible"
    _cmd "sudo pacman -S --noconfirm ansible"
    __task "Installing python3-argcomplete"
    _cmd "sudo pacman -S --noconfirm python-argcomplete"
    _cmd "sudo activate-global-python-argcomplete3"
  fi
  if ! pacman -Q python3 >/dev/null 2>&1; then
    __task "Installing Python3"
    _cmd "sudo pacman -S --noconfirm python3"
  fi
  if ! pacman -Q python-pip >/dev/null 2>&1; then
    __task "Installing Python3 Pip"
    _cmd "sudo pacman -S --noconfirm python-pip"
  fi
  if ! pip3 list | grep watchdog >/dev/null 2>&1; then
    __task "Installing Python3 Watchdog"
    _cmd "sudo pacman -S --noconfirm python-watchdog"
  fi

  if ! pacman -Q openssh >/dev/null 2>&1; then
    __task "Installing OpenSSH"
    _cmd "sudo pacman -S --noconfirm openssh"
  fi

  __task "Setting Locale"
  _cmd "sudo localectl set-locale LANG=en_US.UTF-8"
}

function macos_setup() {
  if ! [ -x "$(command -v brew)" ]; then
    __task "Installing Homebrew"
    _cmd "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
  fi
  if ! [ -x "$(command -v git)" ]; then
    __task "Installing dependencies"
    _cmd "brew install git keepassxc"
  fi
  if ! [ -x "$(command -v ansible)" ]; then
    __task "Installing Ansible"
    _cmd "brew install ansible"
  fi  
}

update_ansible_galaxy() {
  local os=$1
  local os_requirements=""
  __task "Updating Ansible Galaxy"
  if [ -f "$DOTFILES_DIR/requirements/$os.yml" ]; then
    __task "${OVERWRITE}Updating Ansible Galaxy with OS Config: $os"
    os_requirements="$DOTFILES_DIR/requirements/$os.yml"
  fi
  _cmd "ansible-galaxy install -r $DOTFILES_DIR/requirements/common.yml $os_requirements"
}

function confirmVaultAccess() {
  __task "Checking for Keepassxc CLI"
  if keepassxc-cli --version >/dev/null 2>&1; then
    KPXC_INSTALLED=1
    if [[ -n "$KPXC_VAULT" ]] && [[ -n $KPXC_PW ]]; then
      local KPXC_AUTH_TEST=$(echo "${KPXC_PW}" | keepassxc-cli db-info -q "${KPXC_VAULT}" | grep -o "${KPXC_VAULT}")
      if [[ -n "${KPXC_AUTH_TEST}" ]]; then
	KPXC_AUTHENTICATED=1
      fi
    fi
  fi
}

if [ -f /etc/os-release ]; then
  source /etc/os-release
else
  if [ -x "$(command -v uname)" ]; then
    ID=$(uname -s)
    VERSION_ID=$(uname -r)
  fi
fi

__task "Loading Setup for detected OS: $ID"
case $ID in
  debian)
    debian_setup
    ;;
  ubuntu)
    ubuntu_setup
    ;;
  arch)
    arch_setup
    ;;
  Darwin)
    macos_setup
    ;;
  *)
    __task "Unsupported OS"
    _cmd "echo 'Unsupported OS'"
    ;;
esac


if ! [[ -f "$SSH_DIR/authorized_keys" ]]; then
  __task "Generating SSH keys"
  _cmd "mkdir -p $SSH_DIR"
  _cmd "chmod 700 $SSH_DIR"
  _cmd "ssh-keygen -b 4096 -t rsa -f $SSH_DIR/id_rsa -N '' -C $USER@$HOSTNAME"
  _cmd "cat $SSH_DIR/id_rsa.pub >> $SSH_DIR/authorized_keys"
fi

if ! [[ -f "$SSL_DIR/cert" ]]; then
  __task "Generating SSL keys"
  _cmd "mkdir -p $SSL_DIR"
  _cmd "chmod 700 $SSL_DIR"
  _cmd "openssl genrsa -out \"$SSL_DIR/cert\" 4096"
  _cmd "openssl rsa -in \"$SSL_DIR/cert\" -pubout -out \"$SSL_DIR/cert.pub\""
fi

if ! [[ -d "$DOTFILES_DIR" ]]; then
  __task "Cloning repository"
  _cmd "git clone --quiet https://github.com/erlenmeyer316/ansible_dotfiles.git $DOTFILES_DIR"
else
  __task "Updating repository"
  _cmd "git -C $DOTFILES_DIR pull --quiet"
fi

pushd "$DOTFILES_DIR" 2>&1 > /dev/null
update_ansible_galaxy $ID

# No password managers are being used at this time
confirmVaultAccess


if [[ $KPXC_INSTALLED -eq 1 ]]; then
  if [[ $KPXC_AUTHENTICATED -eq 1 ]]; then
    printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}Checking for Keepassxc CLI: Keepassxc Authentication successful! ☕${NC}\n"
     if ! [[ -f "$KPXC_DIR/conf" ]]; then
	printf "$KPXC_PW" > "$KPXC_DIR/conf.tmp"
	openssl pkeyutl -encrypt -pubin -inkey "${SSL_DIR}/cert.pub" -in "${KPXC_DIR}/conf.tmp" -out "${KPXC_DIR}/conf"
	rm -rf "${KPXC_DIR}/conf.tmp"
     fi
    ansible-playbook "$DOTFILES_DIR/main.yml" "$@"
    unset $KPXC_PW
  else
    printf "${OVERWRITE}${LRED} [X]  ${LRED}Checking for Keepassxc CLI: Unable to Authenticate with Keepassxc. Please verify ${ENV_FILE} is correct.${NC}\n"
  fi
fi

popd 2>&1 > /dev/null

if ! [[ -f "$IS_FIRST_RUN" ]]; then
  echo -e "${CHECK_MARK} ${GREEN}First run complete!${NC}"
  echo -e "${ARROW} ${CYAN}Please reboot your computer to complete the setup.${NC}"
  touch "$IS_FIRST_RUN"
fi
